names_condition = colnames(expressionLevel_Gasch, do.NULL = TRUE, prefix = "col")[155:176]
x = as.matrix(fullTable_Gasch_na2zero[names_motifs_valid])
y = as.matrix(fullTable_Gasch_na2zero[names_condition])
cv_models_all = cv.glmnet(x, y, family = "mgaussian")
names_condition = colnames(expressionLevel_Gasch, do.NULL = TRUE, prefix = "col")[155:160]
x = as.matrix(fullTable_Gasch_na2zero[names_motifs_valid])
y = as.matrix(fullTable_Gasch_na2zero[names_condition])
cv_models_all = cv.glmnet(x, y, family = "mgaussian")
names_condition = colnames(expressionLevel_Gasch, do.NULL = TRUE, prefix = "col")[155:175]
x = as.matrix(fullTable_Gasch_na2zero[names_motifs_valid])
y = as.matrix(fullTable_Gasch_na2zero[names_condition])
cv_models_all = cv.glmnet(x, y, family = "mgaussian")
View(fullTable_Gasch_factor)
names_condition = colnames(expressionLevel_Gasch, do.NULL = TRUE, prefix = "col")[155:176]
names_condition
names_condition[22]
# Chunk 1: set project folder
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd("..")
getwd()
# Chunk 2: Setup
library(tidyverse)
# Chunk 3: load Gasch's data
expressionLevel_Gasch <- read_tsv("data/Gasch2000_complete_dataset_original.txt",
locale = locale(decimal = ","))
colnames(expressionLevel_Gasch)[1] <- "geneName"
colnames(expressionLevel_Gasch)[1:72] <-
c('geneName','NAME','GWEIGHT',	'hs_05min_hs-1','hs_10min_hs-1','hs_15min_hs-1','hs_20min_hs-1','hs_30min_hs-1','hs_40min_hs-1','hs_60min_hs-1','hs_80min_hs-1','hs_00min_hs-2','hs_00min_hs-2','hs_00min_hs-2','hs_05min_hs-2','hs_15min_hs-2','hs_30min_hs-2','hs_60min_hs-2','hs_37to25_15min','hs_37to25_30min','hs_37to25_45min','hs_37to25_60min','hs_37to25_90min','hs_17to37_20min', 'hs_21to37_20min','hs_25to37_20min','hs_29to37_20min','hs_33to37_20min','hs_29to33_05min','hs_29to33_15min','hs_29to33_30min','33C_vs_30C_90min','29C(1M_sorbitol)~33C(1M_sorbitol)_05min','29C(1M_sorbitol)~33C(1M_sorbitol)_15min','29C(1M_sorbitol)~33C(1M_sorbitol)_30min','29C(1M_sorbitol)~33C(NO_sorbitol)_05min','29C(1M_sorbitol)~33C(NO_sorbitol)_15min','29C(1M_sorbitol)~33C(NO_sorbitol)_30min','0.32mM_H2O2_10min_redo','0.32mM_H2O2_20min_redo','0.32mM_H2O2_30min_redo','0.32mM_H2O2_40min_rescan','0.32mM_H2O2_50min_redo','0.32mM_H2O2_60min_redo','0.32mM_H2O2_80min_redo','0.32mM_H2O2_100min_redo','0.32mM_H2O2_120min_redo','0.32mM_H2O2_160min_redo','1mM_Menadione_10min_redo','1mM_Menadione_20min_redo','1mM_Menadione_30min_redo','1mM_Menadione_40min_redo','1mM_Menadione_50min_redo','1mM_Menadione_80min_redo','1mM_Menadione_105min_redo','1mM_Menadione_120min_redo','1mM_Menadione_160min_redo','2.5mM_DTT_005min_dtt-1','2.5mM_DTT_015min_dtt-1','2.5mM_DTT_030min_dtt-1','2.5mM_DTT_045min_dtt-1','2.5mM_DTT_060min_dtt-1','2.5mM_DTT_090min_dtt-1','2.5mM_DTT_120min_dtt-1','2.5mM_DTT_180min_dtt-1','dtt_000_min_dtt-2','dtt_015_min_dtt-2','dtt_030_min_dtt-2','dtt_060_min_dtt-2','dtt_120_min_dtt-2','dtt_240_min_dtt-2','dtt_480_min_dtt-2')
colnames(expressionLevel_Gasch)[72:174] <-
c('1.5mM_diamide_5min','1.5mM_diamide_10min','1.5mM_diamide_20min','1.5mM_diamide_30min','1.5mM_diamide_40min','1.5mM_diamide_50min','1.5mM_diamide_60min','1.5mM_diamide_90min','1M_sorbitol_05min','1M_sorbitol_15min','1M_sorbitol_30min','1M_sorbitol_45min','1M_sorbitol_60min','1M_sorbitol_90min','1M_sorbitol_120min','Hypo_osmotic_05min','Hypo_osmotic_15min','Hypo_osmotic_30min','Hypo_osmotic_45min','Hypo_osmotic_60min','steady_state_1M_sorbitol','aa_starv_0.5h','aa_starv_1h','aa_starv_2h','aa_starv_4h','aa_starv_6h','Nitrogen_Depletion_30min','Nitrogen_Depletion_1h','Nitrogen_Depletion_2h','Nitrogen_Depletion_4h','Nitrogen_Depletion_8h','Nitrogen_Depletion_12h','Nitrogen_Depletion_1d','Nitrogen_Depletion_2d','Nitrogen_Depletion_3d','Nitrogen_Depletion_5d','Diauxic_Shift_Timecourse_0h','Diauxic_Shift_Timecourse_9.5h','Diauxic_Shift_Timecourse_11.5h','Diauxic_Shift_Timecourse_13.5h','Diauxic_Shift_Timecourse_15.5h','Diauxic_Shift_Timecourse_18.5h','Diauxic_Shift_Timecourse_20.5h','YPD_2h_ypd-2','YPD_4h_ypd-2','YPD_6h_ypd-2','YPD_8h_ypd-2','YPD_10h_ypd-2	YPD_12h_ypd-2','YPD_1d_ypd-2','YPD_2d_ypd-2','YPD_3d_ypd-2','YPD_5d_ypd-2','YPD_stationary_phase_2h_ypd-1','YPD_stationary_phase_4h_ypd-1','YPD_stationary_phase_8h_ypd-1','YPD_stationary_phase_12h_ypd-1','YPD_stationary_phase_1d_ypd-1','YPD_stationary_phase_2d_ypd-1','YPD_stationary_phase_3d_ypd-1','YPD_stationary_phase_5d_ypd-1','YPD_stationary_phase_7d_ypd-1','YPD_stationary_phase_13d_ypd-1','YPD_stationary_phase_22d_ypd-1','YPD_stationary_phase_28d_ypd-1','DBY7286_37C_20min','DBYmsn2-4_37C_20min','DBYmsn2/4_real_strain_37C_20min','DBYyap1-_37Cheat_20min_redo','DBYyap1_37C_repeat','DBY7286_0.3mM_H2O2_20min','DBYmsn2msn4_good_strain_0.32mM_H2O2','DBYmsn2/4_real_strain_0.32mM_H2O2_20min','DBYyap1-_0.3mM_H2O2_20min','DBYyap1_0.32mM_H2O2_20min','Msn2_overexpression_repeat','Msn4_overexpression','YAP1_overexpression','ethanol_vs_reference_pool_car-1','galactose_vs_reference_poolcar-1','glucose_vs_reference_pool_car-1','mannose_vs_reference_pool_car-1','raffinose_vs_reference_pool_car-1','sucrose_vs_reference_pool_car-1','YP_ethanol_vs_reference_pool_car-2','YP_fructose_vs_reference_pool_car-2','YP_galactose_vs_reference_pool_car-2','YP_glucose_vs_reference_pool_car-2','YP_mannose_vs_reference_pool_car-2','YP_raffinose_vs_reference_pool_car-2','YP_sucrose_vs_reference_pool_car-2','17C_growth_ct-1','21C_growth_ct-1','25C_growth_ct-1','29C_growth_ct-1','37C_growth_ct-1','steady_state_15C_ct-2','steady_state_17C_ct-2','steady_state_21C_ct-2','steady_state_25C_ct-2','steady_state_29C_ct-2','steady_state_33C_ct-2','steady_state_36C_ct-2','steady_state_36C_ct-2_repeat_hyb')
write.table(expressionLevel_Gasch,"data/Gasch2000_complete_dataset_rename.txt",sep="\t",row.names=FALSE)
#ref datasets for UTRs
UTR_raw <- read_rds("../data/Sun_mutation_UTRs.rds")
#Get sequences from UTR_raw in a separate vector
UTR_3 <- UTR_raw$UTR3_seq
#Load Manually created motifs list into a vector
motifs_raw <- scan("../data/list_motifs.txt", character())
motifs_cheng = c("TGTAAATA", "TGCAT", "TTTTTTA", "ATATTC")
# load Gasch's data
expressionLevel_Gasch <- read_tsv("../data/Gasch2000_complete_dataset_rename.txt",
locale = locale(decimal = ","))
# convert all the expression data to number
for (i in names(expressionLevel_Gasch)[3:176]) {
expressionLevel_Gasch[[i]] <- as.numeric(as.character(expressionLevel_Gasch[[i]]))
}
names_condition = colnames(expressionLevel_Gasch, do.NULL = TRUE, prefix = "col")[171:176]
x = as.matrix(fullTable_Gasch_na2zero[names_motifs_valid])
y = as.matrix(fullTable_Gasch_na2zero[names_condition])
fullTable_Gasch_na2zero = fullTable_Gasch
fullTable_Gasch_na2zero[is.na(fullTable_Gasch_na2zero)] <- 0.0
names_condition = colnames(expressionLevel_Gasch, do.NULL = TRUE, prefix = "col")[171:176]
x = as.matrix(fullTable_Gasch_na2zero[names_motifs_valid])
y = as.matrix(fullTable_Gasch_na2zero[names_condition])
names_condition
#ref datasets for UTRs
UTR_raw <- read_rds("../data/Sun_mutation_UTRs.rds")
#Get sequences from UTR_raw in a separate vector
UTR_3 <- UTR_raw$UTR3_seq
#Load Manually created motifs list into a vector
motifs_raw <- scan("../data/list_motifs.txt", character())
motifs_cheng = c("TGTAAATA", "TGCAT", "TTTTTTA", "ATATTC")
# load Gasch's data
expressionLevel_Gasch <- read_tsv("../data/Gasch2000_complete_dataset_rename.txt",
locale = locale(decimal = ","))
# convert all the expression data to number
for (i in names(expressionLevel_Gasch)[3:176]) {
expressionLevel_Gasch[[i]] <- as.numeric(as.character(expressionLevel_Gasch[[i]]))
}
names_condition = colnames(expressionLevel_Gasch, do.NULL = TRUE, prefix = "col")[171:176]
names_condition
x = as.matrix(fullTable_Gasch_na2zero[names_motifs_valid])
y = as.matrix(fullTable_Gasch_na2zero[names_condition])
fullTable_Gasch_na2zero = fullTable_Gasch
fullTable_Gasch_na2zero[is.na(fullTable_Gasch_na2zero)] <- 0.0
names_condition = colnames(expressionLevel_Gasch, do.NULL = TRUE, prefix = "col")[171:176]
names_condition
x = as.matrix(fullTable_Gasch_na2zero[names_motifs_valid])
y = as.matrix(fullTable_Gasch_na2zero[names_condition])
View(fullTable_Gasch_factor)
View(fullTable_Gasch)
library(data.table)
library(tidyverse)
library(lmodel2)
library(splitstackshape)
library(gridExtra)
library(glmnet)
# obtain mean square error from a linear model
mse <- function(model){
mean(summary(model)$residuals^2)
}
# plot graph with error bar by value and deviation
plot_mean_deviation <- function(dataset,label,mean,deviation){
plot(1:dim(dataset)[1],dataset[[mean]], pch=19,xlab="",ylab="coefficient",xaxt="n",xlim = c(0.5,dim(dataset)[1]+0.5),
ylim=c(min(dataset[mean]-1.96*dataset[deviation]),max((dataset[mean]+1.96*dataset[deviation]))))
lines(rbind(1:dim(dataset)[1],1:dim(dataset)[1],NA),rbind(dataset[[mean]]-1.96*dataset[[deviation]],dataset[[mean]]+1.96*dataset[[deviation]],NA))
axis(side=1,at=1:dim(dataset)[1],labels=dataset[[label]])
}
#ref datasets for UTRs
UTR_raw <- read_rds("../data/Sun_mutation_UTRs.rds")
#Get sequences from UTR_raw in a separate vector
UTR_3 <- UTR_raw$UTR3_seq
#Load Manually created motifs list into a vector
motifs_raw <- scan("../data/list_motifs.txt", character())
motifs_cheng = c("TGTAAATA", "TGCAT", "TTTTTTA", "ATATTC")
# load Gasch's data
expressionLevel_Gasch <- read_tsv("../data/Gasch2000_complete_dataset_rename.txt",
locale = locale(decimal = ","))
# convert all the expression data to number
for (i in names(expressionLevel_Gasch)[3:176]) {
expressionLevel_Gasch[[i]] <- as.numeric(as.character(expressionLevel_Gasch[[i]]))
}
#Dictionary for non-specific codes and converting U -> T
motifs <- motifs_raw %>% str_replace_all(c("U" = "T", "W" = "(A|T)", "S" = "(C|G)", "M" = "(A|C)", "K" = "(G|T)", "R" = "(A|G)", "Y" = "(C|T)", "B" = "(C|G|T)", "D" = "(A|G|T)", "H" = "(A|C|T)", "V" = "(A|C|G)", "N" = "(A|C|G|T)"))
#Initate ref tibble and store gene names
ref_motifs <- tibble(geneName = UTR_raw$genename)
#Search and add frequency of each c(motif) as a column in ref dataset
for (i in 1:length(motifs)){
ref_motifs <- mutate(.data = ref_motifs,!!motifs_raw[i] := str_count(UTR_3, motifs[i]))
}
names_motifs_all <- names(ref_motifs)[2:length(ref_motifs)]
# merge motifs
fullTable_Gasch <- merge(expressionLevel_Gasch,ref_motifs,by = "geneName")
# convert type of motifs frequency to factor for violin plotting
fullTable_Gasch_factor = fullTable_Gasch
for(i in names_motifs_all){
fullTable_Gasch_factor[[i]] <- as.factor(as.character(fullTable_Gasch_factor[[i]]))
}
# construct the motif frequency table
motifs_count_sum <- colSums(fullTable_Gasch[names_motifs_all],na.rm=TRUE)
# summary of the table
summary(motifs_count_sum)
# plot histgram
hist(motifs_count_sum, xlim = c(0,20), breaks = c(0,1,2,3,5,10,20,30,8000), main = 'histogram of motifs frequency sum')
# remove zero-frequency motifs from list
remove_list = NULL
for (i in names(motifs_count_sum)){
if (motifs_count_sum[[i]] == 0){
remove_list <- c(remove_list,i)
}
}
names_motifs_valid <- names_motifs_all[!names_motifs_all %in% remove_list]
names_temperature_condition = vector(mode="character", length=5)
names_temperature_condition[1] = "hs_17to37_20min"
names_temperature_condition[2] = "hs_21to37_20min"
names_temperature_condition[3] = "hs_25to37_20min"
names_temperature_condition[4] = "hs_29to37_20min"
names_temperature_condition[5] = "hs_33to37_20min"
# compute correlation coefficient
motif_overview <- as.data.frame(
cor(fullTable_Gasch[names_motifs_valid],fullTable_Gasch[names_temperature_condition], use = "na.or.complete"))
# compute mean
motif_overview$R_mean <- rowMeans(motif_overview[names_temperature_condition[1:5]])
## plot motifs with high correlation coefficient
ggplot(data = melt(setDT(as.data.frame(motif_overview[c('UGUAHMNUA','TGTATAWT','ATATTC','TGTAAATA'),names_temperature_condition]), keep.rownames = TRUE), "rn"), aes(x=variable,y=value,group = rn)) +
geom_line(aes(colour=rn)) +
ylim(-0.25,0.1) +
labs(x = "heat shock to 37C from", y = "correlation coefficient") +
scale_x_discrete(labels=c("hs_17to37_20min" = "17C", "hs_21to37_20min" = "21C","hs_25to37_20min" = "25C","hs_29to37_20min" = "29C", "hs_33to37_20min" = "33C")) +
theme(text = element_text(size=20))
# filter out motif with frequency lower than or equal to 5
remove_list = NULL
for (i in names(motifs_count_sum)){
if (motifs_count_sum[[i]] < 6){
remove_list <- c(remove_list,i)
}
}
names_motifs_valid <- names_motifs_all[!names_motifs_all %in% remove_list]
# linear regression on heat shock from 17C to 37C
formula_model_hs_17to37 <- as.formula(paste("hs_17to37_20min ~",paste(names_motifs_valid, collapse = "+")))
model_hs_17to37 = lm(formula_model_hs_17to37,fullTable_Gasch)
par(mfrow=c(2,2))
plot(model_hs_17to37)
print("mean square error:")
mse(model_hs_17to37)
# investigate coefficients
summary(model_hs_17to37)
motif_temperature_sensitive = c('UGUAHMNUA','TGTATAWT','ATATTC','TGTAAATA')
names_temperature_condition = vector(mode="character", length=5)
names_temperature_condition[1] = "hs_15min_hs-1"
names_temperature_condition[2] = "hs_30min_hs-1"
names_temperature_condition[3] = "hs_40min_hs-1"
names_temperature_condition[4] = "hs_60min_hs-1"
names_temperature_condition[5] = "hs_80min_hs-1"
# compute correlation coefficient
motif_overview <- as.data.frame(
cor(fullTable_Gasch[names_motifs_valid],fullTable_Gasch[names_temperature_condition], use = "na.or.complete"))
# plot motifs with high correlation coefficient
ggplot(data = melt(setDT(as.data.frame(motif_overview[motif_temperature_sensitive,names_temperature_condition]), keep.rownames = TRUE), "rn"),
aes(x=variable,y=value,group = rn)) +
geom_line(aes(colour=rn)) +
ylim(-0.3,0.1) +
labs(x = "after heat shock", y = "correlation coefficient") +
scale_x_discrete(labels=c("hs_15min_hs-1" = "15min", "hs_30min_hs-1" = "30min","hs_40min_hs-1" = "40min","hs_60min_hs-1" = "60min","hs_80min_hs-1" = "80min")) +
theme(text = element_text(size=20))
# pick a group of temperature condition
names_temperature_condition = vector(mode="character", length=3)
names_temperature_condition[1] = "29C(1M_sorbitol)~33C(1M_sorbitol)_05min"
names_temperature_condition[2] = "29C(1M_sorbitol)~33C(1M_sorbitol)_15min"
names_temperature_condition[3] = "29C(1M_sorbitol)~33C(1M_sorbitol)_30min"
# compute correlation coefficient
motif_overview_steady_temperature <- as.data.frame(
cor(fullTable_Gasch[names_motifs_valid],fullTable_Gasch[names_temperature_condition], use = "na.or.complete"))
ggplot(data = melt(setDT(as.data.frame(motif_overview_steady_temperature[motif_temperature_sensitive,names_temperature_condition]), keep.rownames = TRUE), "rn"),
aes(x=variable,y=value,group = rn)) + geom_line(aes(colour=rn)) + ylim(-0.25,0.1) +
labs(x = "after heat shock with sorbitol", y = "correlation coefficient")+
scale_x_discrete(labels=c("29C(1M_sorbitol)~33C(1M_sorbitol)_05min" = "5min", "29C(1M_sorbitol)~33C(1M_sorbitol)_15min" = "15min","29C(1M_sorbitol)~33C(1M_sorbitol)_30min" = "30min")) +
theme(text = element_text(size=20))
names_temperature_condition = vector(mode="character", length=5)
names_temperature_condition[1] = "hs_37to25_15min"
names_temperature_condition[2] = "hs_37to25_30min"
names_temperature_condition[3] = "hs_37to25_45min"
names_temperature_condition[4] = "hs_37to25_60min"
names_temperature_condition[5] = "hs_37to25_90min"
# compute correlation coefficient
motif_overview <- as.data.frame(
cor(fullTable_Gasch[names_motifs_valid],fullTable_Gasch[names_temperature_condition], use = "na.or.complete"))
## plot motifs with high correlation coefficient
ggplot(data = melt(setDT(as.data.frame(motif_overview[motif_temperature_sensitive,names_temperature_condition]), keep.rownames = TRUE), "rn"),
aes(x=variable,y=value,group = rn)) + geom_line(aes(colour=rn)) + ylim(-0.1,0.2) +
labs(x = "after hypothermia from 37C to 25C", y = "correlation coefficient")+
scale_x_discrete(labels=c("hs_37to25_15min" = "15min", "hs_37to25_30min" = "30min","hs_37to25_45min" = "45min","hs_37to25_60min" = "60min","hs_37to25_90min" = "90min")) +
theme(text = element_text(size=20))
na_count_sum = rowSums(is.na(expressionLevel_Gasch[4:176]))
hist(na_count_sum, breaks = c(0,1,2,5,10,20,30,50,70,100), main = 'histgram of percentage of missing value')
fullTable_Gasch_na2zero = fullTable_Gasch
fullTable_Gasch_na2zero[is.na(fullTable_Gasch_na2zero)] <- 0.0
motifs_count_sum <- colSums(fullTable_Gasch[names_motifs_all],na.rm=TRUE)
remove_list = NULL
for (i in names(motifs_count_sum)){
if (motifs_count_sum[[i]] == 0){
remove_list <- c(remove_list,i)
}
}
names_motifs_valid <- names_motifs_all[!names_motifs_all %in% remove_list]
names_condition = colnames(expressionLevel_Gasch, do.NULL = TRUE, prefix = "col")[171:176]
names_condition
x = as.matrix(fullTable_Gasch_na2zero[names_motifs_valid])
y = as.matrix(fullTable_Gasch_na2zero[names_condition])
cv_models_all = cv.glmnet(x, y, family = "mgaussian")
names_condition = colnames(expressionLevel_Gasch, do.NULL = TRUE, prefix = "col")[4:176]
x = as.matrix(fullTable_Gasch_na2zero[names_motifs_valid])
y = as.matrix(fullTable_Gasch_na2zero[names_condition])
cv_models_all = cv.glmnet(x, y, family = "mgaussian")
plot(cv_models_all)
View(cv_models_all)
models_all_minLambda = glmnet(x, y, family = "mgaussian", lambda = cv_models_all$lambda.min)
models_all_1seLambda = glmnet(x, y, family = "mgaussian", lambda = cv_models_all$lambda.1se)
plot(models_all_minLambda)
summary(models_all_minLambda)
count_nonzero_coefficient = 0
for (condition in names_environmental_stress) {
count_nonzero_coefficient = count_nonzero_coefficient + models_all$beta[[condition]]@p[2]
}
#Dictionary for non-specific codes and converting U -> T
motifs <- motifs_raw %>% str_replace_all(c("U" = "T", "W" = "(A|T)", "S" = "(C|G)", "M" = "(A|C)", "K" = "(G|T)", "R" = "(A|G)", "Y" = "(C|T)", "B" = "(C|G|T)", "D" = "(A|G|T)", "H" = "(A|C|T)", "V" = "(A|C|G)", "N" = "(A|C|G|T)"))
#Initate ref tibble and store gene names
ref_motifs <- tibble(geneName = UTR_raw$genename)
#Search and add frequency of each c(motif) as a column in ref dataset
for (i in 1:length(motifs)){
ref_motifs <- mutate(.data = ref_motifs,!!motifs_raw[i] := str_count(UTR_3, motifs[i]))
}
names_motifs_all = names(ref_motifs)[2:length(ref_motifs)]
names_environmental_stress = names(expressionLevel_Gasch)[4:length(expressionLevel_Gasch)]
count_nonzero_coefficient = 0
for (condition in names_environmental_stress) {
count_nonzero_coefficient = count_nonzero_coefficient + models_all$beta[[condition]]@p[2]
}
count_nonzero_coefficient = 0
for (condition in names_environmental_stress) {
count_nonzero_coefficient = count_nonzero_coefficient + models_all_minLambda$beta[[condition]]@p[2]
}
count_all_coefficient = length(names_environmental_stress)*length(names_motifs_valid)
1 - (count_nonzero_coefficient/count_all_coefficient)
{
names_temperature_condition = vector(mode="character", length=5)
names_temperature_condition[1] = "hs_05min_hs-1"
names_temperature_condition[2] = "hs_10min_hs-1"
names_temperature_condition[3] = "hs_15min_hs-1"
names_temperature_condition[4] = "hs_30min_hs-1"
names_temperature_condition[5] = "hs_40min_hs-1"
names_temperature_condition[6] = "hs_60min_hs-1"
names_temperature_condition[7] = "hs_80min_hs-1"
}
{
coefficients = NULL
for (condition in names_temperature_condition) {
column = numeric(models_all$beta[[condition]]@Dim[1])
column[models_all$beta[[condition]]@i+1] = models_all$beta[[condition]]@x
coefficients = cbind(coefficients,column)
}
coefficients = as.data.frame(coefficients)
names(coefficients) = names_temperature_condition
row.names(coefficients) = names_motifs_valid
melt(setDT(coefficients, keep.rownames = TRUE), "rn")
}
{
names_temperature_condition = vector(mode="character", length=5)
names_temperature_condition[1] = "hs_05min_hs-1"
names_temperature_condition[2] = "hs_10min_hs-1"
names_temperature_condition[3] = "hs_15min_hs-1"
names_temperature_condition[4] = "hs_30min_hs-1"
names_temperature_condition[5] = "hs_40min_hs-1"
names_temperature_condition[6] = "hs_60min_hs-1"
names_temperature_condition[7] = "hs_80min_hs-1"
}
{
coefficients = NULL
for (condition in names_temperature_condition) {
column = numeric(models_all_minLambda$beta[[condition]]@Dim[1])
column[models_all_minLambda$beta[[condition]]@i+1] = models_all_minLambda$beta[[condition]]@x
coefficients = cbind(coefficients,column)
}
coefficients = as.data.frame(coefficients)
names(coefficients) = names_temperature_condition
row.names(coefficients) = names_motifs_valid
melt(setDT(coefficients, keep.rownames = TRUE), "rn")
}
ggplot(data = melt(setDT(coefficients[1:10], keep.rownames = TRUE), "rn"), aes(x=variable,y=value,group = rn)) +
geom_line(aes(colour=rn))
ggplot(data = melt(setDT(coefficients[11:20], keep.rownames = TRUE), "rn"), aes(x=variable,y=value,group = rn)) +
geom_line(aes(colour=rn))
ggplot(data = melt(setDT(coefficients[21:30], keep.rownames = TRUE), "rn"), aes(x=variable,y=value,group = rn)) +
geom_line(aes(colour=rn))
ggplot(data = melt(setDT(coefficients[31:40], keep.rownames = TRUE), "rn"), aes(x=variable,y=value,group = rn)) +
geom_line(aes(colour=rn))
ggplot(data = melt(setDT(coefficients[41:50], keep.rownames = TRUE), "rn"), aes(x=variable,y=value,group = rn)) +
geom_line(aes(colour=rn))
count_nonzero_coefficient = 0
for (condition in names_environmental_stress) {
count_nonzero_coefficient = count_nonzero_coefficient + models_all_minLambda$beta[[condition]]@p[2]
}
count_all_coefficient = length(names_environmental_stress)*length(names_motifs_valid)
1 - (count_nonzero_coefficient/count_all_coefficient)
models_all_minLambda = glmnet(x, y, family = "mgaussian", lambda = cv_models_all$lambda.min)
models_all_1seLambda = glmnet(x, y, family = "mgaussian", lambda = cv_models_all$lambda.1se)
count_nonzero_coefficient = 0
for (condition in names_environmental_stress) {
count_nonzero_coefficient = count_nonzero_coefficient + models_all_minLambda$beta[[condition]]@p[2]
}
count_all_coefficient = length(names_environmental_stress)*length(names_motifs_valid)
1 - (count_nonzero_coefficient/count_all_coefficient)
library(data.table)
library(tidyverse)
library(lmodel2)
library(splitstackshape)
library(gridExtra)
library(glmnet)
# obtain mean square error from a linear model
mse <- function(model){
mean(summary(model)$residuals^2)
}
# plot graph with error bar by value and deviation
plot_mean_deviation <- function(dataset,label,mean,deviation){
plot(1:dim(dataset)[1],dataset[[mean]], pch=19,xlab="",ylab="coefficient",xaxt="n",xlim = c(0.5,dim(dataset)[1]+0.5),
ylim=c(min(dataset[mean]-1.96*dataset[deviation]),max((dataset[mean]+1.96*dataset[deviation]))))
lines(rbind(1:dim(dataset)[1],1:dim(dataset)[1],NA),rbind(dataset[[mean]]-1.96*dataset[[deviation]],dataset[[mean]]+1.96*dataset[[deviation]],NA))
axis(side=1,at=1:dim(dataset)[1],labels=dataset[[label]])
}
#ref datasets for UTRs
UTR_raw <- read_rds("../data/Sun_mutation_UTRs.rds")
#Get sequences from UTR_raw in a separate vector
UTR_3 <- UTR_raw$UTR3_seq
#Load Manually created motifs list into a vector
motifs_raw <- scan("../data/list_motifs.txt", character())
motifs_cheng = c("TGTAAATA", "TGCAT", "TTTTTTA", "ATATTC")
# load Gasch's data
expressionLevel_Gasch <- read_tsv("../data/Gasch2000_complete_dataset_rename.txt",
locale = locale(decimal = ","))
# convert all the expression data to number
for (i in names(expressionLevel_Gasch)[3:176]) {
expressionLevel_Gasch[[i]] <- as.numeric(as.character(expressionLevel_Gasch[[i]]))
}
#Dictionary for non-specific codes and converting U -> T
motifs <- motifs_raw %>% str_replace_all(c("U" = "T", "W" = "(A|T)", "S" = "(C|G)", "M" = "(A|C)", "K" = "(G|T)", "R" = "(A|G)", "Y" = "(C|T)", "B" = "(C|G|T)", "D" = "(A|G|T)", "H" = "(A|C|T)", "V" = "(A|C|G)", "N" = "(A|C|G|T)"))
#Initate ref tibble and store gene names
ref_motifs <- tibble(geneName = UTR_raw$genename)
#Search and add frequency of each c(motif) as a column in ref dataset
for (i in 1:length(motifs)){
ref_motifs <- mutate(.data = ref_motifs,!!motifs_raw[i] := str_count(UTR_3, motifs[i]))
}
names_motifs_all = names(ref_motifs)[2:length(ref_motifs)]
names_environmental_stress = names(expressionLevel_Gasch)[4:length(expressionLevel_Gasch)]
# merge motifs
fullTable_Gasch <- merge(expressionLevel_Gasch,ref_motifs,by = "geneName")
# convert type of motifs frequency to factor for violin plotting
fullTable_Gasch_factor = fullTable_Gasch
for(i in names_motifs_all){
fullTable_Gasch_factor[[i]] <- as.factor(as.character(fullTable_Gasch_factor[[i]]))
}
# construct the motif frequency table
motifs_count_sum <- colSums(fullTable_Gasch[names_motifs_all],na.rm=TRUE)
# summary of the table
summary(motifs_count_sum)
# plot histgram
hist(motifs_count_sum, xlim = c(0,20), breaks = c(0,1,2,3,5,10,20,30,8000), main = 'histogram of motifs frequency sum')
# remove zero-frequency motifs from list
remove_list = NULL
for (i in names(motifs_count_sum)){
if (motifs_count_sum[[i]] == 0){
remove_list <- c(remove_list,i)
}
}
names_motifs_valid <- names_motifs_all[!names_motifs_all %in% remove_list]
names_temperature_condition = vector(mode="character", length=5)
names_temperature_condition[1] = "hs_17to37_20min"
names_temperature_condition[2] = "hs_21to37_20min"
names_temperature_condition[3] = "hs_25to37_20min"
names_temperature_condition[4] = "hs_29to37_20min"
names_temperature_condition[5] = "hs_33to37_20min"
# compute correlation coefficient
motif_overview <- as.data.frame(
cor(fullTable_Gasch[names_motifs_valid],fullTable_Gasch[names_temperature_condition], use = "na.or.complete"))
# compute mean
motif_overview$R_mean <- rowMeans(motif_overview[names_temperature_condition[1:5]])
## plot motifs with high correlation coefficient
ggplot(data = melt(setDT(as.data.frame(motif_overview[c('UGUAHMNUA','TGTATAWT','ATATTC','TGTAAATA'),names_temperature_condition]), keep.rownames = TRUE), "rn"), aes(x=variable,y=value,group = rn)) +
geom_line(aes(colour=rn)) +
ylim(-0.25,0.1) +
labs(x = "heat shock to 37C from", y = "correlation coefficient") +
scale_x_discrete(labels=c("hs_17to37_20min" = "17C", "hs_21to37_20min" = "21C","hs_25to37_20min" = "25C","hs_29to37_20min" = "29C", "hs_33to37_20min" = "33C")) +
theme(text = element_text(size=20))
# filter out motif with frequency lower than or equal to 5
remove_list = NULL
for (i in names(motifs_count_sum)){
if (motifs_count_sum[[i]] < 6){
remove_list <- c(remove_list,i)
}
}
names_motifs_valid <- names_motifs_all[!names_motifs_all %in% remove_list]
# linear regression on heat shock from 17C to 37C
formula_model_hs_17to37 <- as.formula(paste("hs_17to37_20min ~",paste(names_motifs_valid, collapse = "+")))
model_hs_17to37 = lm(formula_model_hs_17to37,fullTable_Gasch)
par(mfrow=c(2,2))
plot(model_hs_17to37)
print("mean square error:")
mse(model_hs_17to37)
# investigate coefficients
summary(model_hs_17to37)
motif_temperature_sensitive = c('UGUAHMNUA','TGTATAWT','ATATTC','TGTAAATA')
names_temperature_condition = vector(mode="character", length=5)
names_temperature_condition[1] = "hs_15min_hs-1"
names_temperature_condition[2] = "hs_30min_hs-1"
names_temperature_condition[3] = "hs_40min_hs-1"
names_temperature_condition[4] = "hs_60min_hs-1"
names_temperature_condition[5] = "hs_80min_hs-1"
# compute correlation coefficient
motif_overview <- as.data.frame(
cor(fullTable_Gasch[names_motifs_valid],fullTable_Gasch[names_temperature_condition], use = "na.or.complete"))
# plot motifs with high correlation coefficient
ggplot(data = melt(setDT(as.data.frame(motif_overview[motif_temperature_sensitive,names_temperature_condition]), keep.rownames = TRUE), "rn"),
aes(x=variable,y=value,group = rn)) +
geom_line(aes(colour=rn)) +
ylim(-0.3,0.1) +
labs(x = "after heat shock", y = "correlation coefficient") +
scale_x_discrete(labels=c("hs_15min_hs-1" = "15min", "hs_30min_hs-1" = "30min","hs_40min_hs-1" = "40min","hs_60min_hs-1" = "60min","hs_80min_hs-1" = "80min")) +
theme(text = element_text(size=20))
# pick a group of temperature condition
names_temperature_condition = vector(mode="character", length=3)
names_temperature_condition[1] = "29C(1M_sorbitol)~33C(1M_sorbitol)_05min"
names_temperature_condition[2] = "29C(1M_sorbitol)~33C(1M_sorbitol)_15min"
names_temperature_condition[3] = "29C(1M_sorbitol)~33C(1M_sorbitol)_30min"
# compute correlation coefficient
motif_overview_steady_temperature <- as.data.frame(
cor(fullTable_Gasch[names_motifs_valid],fullTable_Gasch[names_temperature_condition], use = "na.or.complete"))
ggplot(data = melt(setDT(as.data.frame(motif_overview_steady_temperature[motif_temperature_sensitive,names_temperature_condition]), keep.rownames = TRUE), "rn"),
aes(x=variable,y=value,group = rn)) + geom_line(aes(colour=rn)) + ylim(-0.25,0.1) +
labs(x = "after heat shock with sorbitol", y = "correlation coefficient")+
scale_x_discrete(labels=c("29C(1M_sorbitol)~33C(1M_sorbitol)_05min" = "5min", "29C(1M_sorbitol)~33C(1M_sorbitol)_15min" = "15min","29C(1M_sorbitol)~33C(1M_sorbitol)_30min" = "30min")) +
theme(text = element_text(size=20))
names_temperature_condition = vector(mode="character", length=5)
names_temperature_condition[1] = "hs_37to25_15min"
names_temperature_condition[2] = "hs_37to25_30min"
names_temperature_condition[3] = "hs_37to25_45min"
names_temperature_condition[4] = "hs_37to25_60min"
names_temperature_condition[5] = "hs_37to25_90min"
# compute correlation coefficient
motif_overview <- as.data.frame(
cor(fullTable_Gasch[names_motifs_valid],fullTable_Gasch[names_temperature_condition], use = "na.or.complete"))
## plot motifs with high correlation coefficient
ggplot(data = melt(setDT(as.data.frame(motif_overview[motif_temperature_sensitive,names_temperature_condition]), keep.rownames = TRUE), "rn"),
aes(x=variable,y=value,group = rn)) + geom_line(aes(colour=rn)) + ylim(-0.1,0.2) +
labs(x = "after hypothermia from 37C to 25C", y = "correlation coefficient")+
scale_x_discrete(labels=c("hs_37to25_15min" = "15min", "hs_37to25_30min" = "30min","hs_37to25_45min" = "45min","hs_37to25_60min" = "60min","hs_37to25_90min" = "90min")) +
theme(text = element_text(size=20))
na_count_sum = rowSums(is.na(expressionLevel_Gasch[4:176]))
hist(na_count_sum, breaks = c(0,1,2,5,10,20,30,50,70,100), main = 'histgram of percentage of missing value')
fullTable_Gasch_na2zero = fullTable_Gasch
fullTable_Gasch_na2zero[is.na(fullTable_Gasch_na2zero)] <- 0.0
motifs_count_sum <- colSums(fullTable_Gasch[names_motifs_all],na.rm=TRUE)
remove_list = NULL
for (i in names(motifs_count_sum)){
if (motifs_count_sum[[i]] == 0){
remove_list <- c(remove_list,i)
}
}
names_motifs_valid <- names_motifs_all[!names_motifs_all %in% remove_list]
names_condition = colnames(expressionLevel_Gasch, do.NULL = TRUE, prefix = "col")[4:176]
x = as.matrix(fullTable_Gasch_na2zero[names_motifs_valid])
y = as.matrix(fullTable_Gasch_na2zero[names_condition])
cv_models_all = cv.glmnet(x, y, family = "mgaussian")
plot(cv_models_all)
models_all_minLambda = glmnet(x, y, family = "mgaussian", lambda = cv_models_all$lambda.min)
models_all_1seLambda = glmnet(x, y, family = "mgaussian", lambda = cv_models_all$lambda.1se)
count_nonzero_coefficient = 0
for (condition in names_environmental_stress) {
count_nonzero_coefficient = count_nonzero_coefficient + models_all_minLambda$beta[[condition]]@p[2]
}
count_all_coefficient = length(names_environmental_stress)*length(names_motifs_valid)
1 - (count_nonzero_coefficient/count_all_coefficient)
length(names_motifs_valid)
count_nonzero_coefficient
count_all_coefficient
